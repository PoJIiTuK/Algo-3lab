increment = 0
    families = []

    while people_list:
        people = people_list[increment]

        for family in families:

            if people[0] in family:
                family.add(people[1])
                increment += 1
                break

            elif people[1] in family:
                family.add(people[0])
                increment += 1
                break

        else:
            increment += 1
            families.append(set((people[0], people[1])))
            if len_of_graph == increment:
                break




def bfs(graph: list, start_vertex: int):
    visited = [False for x in graph]
    distances = [0 for x in graph]
    distances[start_vertex] = 0
    vertex_to_visit_queue = []
    vertex_to_visit_queue.append(start_vertex)
    while vertex_to_visit_queue:
        current_vertex = vertex_to_visit_queue.pop(0)

        for neighbour in graph[current_vertex]:
            # if neighbour vertex is black - ignore it
            if visited[neighbour]:
                continue

            # calculate distances
            distances[neighbour] = distances[current_vertex] + 1
            # mark child vertex as grey
            vertex_to_visit_queue.append(neighbour)

        # mark vertex as black
        visited[current_vertex] = True
    return distances

graph = [[1], [2,3],[1,4,5], [1,6], [2], [2], [3,7,8], [6], [6]]
print(bfs(graph, 0))
